//
//  SignupController.swift
//  SettingUI
//
//  Created by Peter Jang on 31/12/2018.
//  Copyright Â© 2018 Peter Jang. All rights reserved.
//

import UIKit

class SignupController: UIViewController, UITextFieldDelegate {
    
    struct UsableId: Decodable {
        var data: String?
    }
    
    struct Certify: Decodable {
        var data: String?
        var key: String?
    }
    
    
    var insertedEmail: String?
    var emailConfirmed: Bool = false
    var nicknameConfirmed: Bool = false
    var passwordConfirmed: Bool = false
    var idConfirmed: Bool = false
    
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .white
        hideKeyboardWhenTappedAround()
        
        idTextField.delegate = self
        nicknameTextField.delegate = self
        passwordTextField.delegate = self
        emailTextField.delegate = self
        emailConfirmTextField.delegate = self
        
        emailIconImageView.hide()
        emailTextField.hide()
        emailConfirmButton.hide()
        
        emailConfirmTextField.hide()
        emailConfirmIconImageView.hide()
        keyConfirmButton.hide()
        
        
        idCheckIconImageView.isHidden = true
        idConfirmLable.isHidden = true
        
        nicknameConfirmLable.isHidden = true
        nicknameCheckIconImageView.isHidden = true
        
        passwordCheckIconImageView.isHidden = true
        passwordConfirmLable.isHidden = true
        
        idIconImageView.hide()
        idTextField.hide()
        nicknameIconImageView.hide()
        nicknameTextField.hide()
        passwordIconImageView.hide()
        passwordTextField.hide()
        
        signupButton.hide()
        
        setupViews()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        if Global.shared.isErrorLableShowing { Global.removeErrorLable() }
    }
    
    func setupViews()  {
        addSubviews(views: [logoImageView, goBackButton,
                            idIconImageView, nicknameIconImageView, passwordIconImageView, emailIconImageView, emailConfirmIconImageView,
                            idTextField, nicknameTextField, passwordTextField, emailTextField, emailConfirmTextField,
                            emailConfirmButton, keyConfirmButton, signupButton, nicknameConfirmLable, nicknameCheckIconImageView,
                            passwordConfirmLable, passwordCheckIconImageView, idConfirmLable, idCheckIconImageView,
                            policyTextView, agreeLabel, checkbox, nextButoon])
       
        
        goBackButton.anchor(top: view.safeAreaLayoutGuide.topAnchor,
                            leading: view.leadingAnchor,
                            bottom: nil,
                            trailing: nil,
                            padding: .init(top: 10, left: 10, bottom: 0, right: 0),
                            size: .init(width: view.bounds.width/10, height: view.bounds.width/10))
        
        logoImageView.anchor(top: view.safeAreaLayoutGuide.topAnchor,
                             leading: nil,
                             bottom: nil,
                             trailing: nil,
                             padding: .init(top: view.bounds.height/11, left: 0, bottom: 0, right: 0),
                             size: .init(width: 90, height: 145.8))
        logoImageView.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        
        
        
        
        policyTextView.anchor(top: logoImageView.bottomAnchor,
                               leading: view.leadingAnchor,
                               bottom: nil,
                               trailing: view.trailingAnchor,
                               padding: .init(top: view.bounds.height/20, left: view.bounds.width/8, bottom: 0, right: view.bounds.width/8),
                               size: .init(width: 0, height: 250))
        agreeLabel.anchor(top: policyTextView.bottomAnchor,
                          leading: policyTextView.leadingAnchor,
                          bottom: nil,
                          trailing: nil,
                          padding: .init(top: 15, left: 0, bottom: 0, right: 0))
        checkbox.anchor(top: policyTextView.bottomAnchor,
                        leading: agreeLabel.trailingAnchor,
                        bottom: nil,
                        trailing: nil,
                        padding: .init(top: 15, left: 15, bottom: 0, right: 0),
                        size: .init(width: 25, height: 25))
        nextButoon.anchor(top: checkbox.bottomAnchor,
                          leading: checkbox.leadingAnchor,
                          bottom: nil,
                          trailing: nil,
                          padding: .init(top: 15, left: 0, bottom: 0, right: 0))
        
        
        
        
        
        emailIconImageView.anchor(top: emailTextField.topAnchor,
                                  leading: nil,
                                  bottom: nil,
                                  trailing: emailTextField.leadingAnchor,
                                  padding: .init(top: -10, left: 0, bottom: 0, right: 10),
                                  size: .init(width: 30, height: 30))
        emailTextField.anchor(top: logoImageView.bottomAnchor,
                              leading: view.leadingAnchor,
                              bottom: nil,
                              trailing: nil,
                              padding: .init(top: view.bounds.height/13, left: view.bounds.width/3.5, bottom: 0, right: 0),
                              size: .init(width: 200, height: 25))
        emailConfirmIconImageView.anchor(top: emailIconImageView.bottomAnchor,
                                         leading: emailIconImageView.leadingAnchor,
                                         bottom: nil,
                                         trailing: nil,
                                         padding: .init(top: view.bounds.width/12, left: 0, bottom: 0, right: 0),
                                         size: .init(width: 30, height: 30))
        emailConfirmTextField.anchor(top: emailConfirmIconImageView.topAnchor,
                                     leading: emailConfirmIconImageView.trailingAnchor,
                                     bottom: nil,
                                     trailing: nil,
                                     padding: .init(top: 10, left: 10, bottom: 0, right: 0),
                                     size: .init(width: 130, height: 25))
        keyConfirmButton.anchor(top: emailConfirmIconImageView.topAnchor,
                                leading: emailConfirmTextField.trailingAnchor,
                                bottom: nil,
                                trailing: nil,
                                padding: .init(top: 0, left: 30, bottom: 0, right: 0),
                                size: .init(width: 40, height: 30))
        emailConfirmButton.anchor(top: emailIconImageView.bottomAnchor,
                                  leading: nil,
                                  bottom: nil,
                                  trailing: nil,
                                  padding: .init(top: view.bounds.width/12, left: 0, bottom: 0, right: 0),
                                  size: .init(width: 160, height: 30))
        emailConfirmButton.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        
        
        
        
        
        
        idIconImageView.anchor(top: idTextField.topAnchor,
                               leading: nil,
                               bottom: nil,
                               trailing: idTextField.leadingAnchor,
                               padding: .init(top: -10, left: 0, bottom: 0, right: 10),
                               size: .init(width: 30, height: 30))
        idTextField.anchor(top: logoImageView.bottomAnchor,
                           leading: view.leadingAnchor,
                           bottom: nil,
                           trailing: nil,
                           padding: .init(top: view.bounds.width/12, left: view.bounds.width/3.5, bottom: 0, right: 0),
                           size: .init(width: 200, height: 25))
        idConfirmLable.anchor(top: idTextField.bottomAnchor,
                              leading: idTextField.leadingAnchor,
                              bottom: nil,
                              trailing: nil)
        idCheckIconImageView.anchor(top: idTextField.topAnchor,
                                    leading: idTextField.trailingAnchor,
                                    bottom: nil,
                                    trailing: nil,
                                    size: .init(width: 20, height: 20))
        
        nicknameIconImageView.anchor(top: idIconImageView.bottomAnchor,
                                     leading: idIconImageView.leadingAnchor,
                                     bottom: nil,
                                     trailing: nil,
                                     padding: .init(top: view.bounds.width/12, left: 0, bottom: 0, right: 0),
                                     size: .init(width: 30, height: 30))
        nicknameTextField.anchor(top: nicknameIconImageView.topAnchor,
                                 leading: nicknameIconImageView.trailingAnchor,
                                 bottom: nil,
                                 trailing: nil,
                                 padding: .init(top: 10, left: 10, bottom: 0, right: 0),
                                 size: .init(width: 200, height: 25))
        nicknameCheckIconImageView.anchor(top: nicknameTextField.topAnchor,
                                          leading: nicknameTextField.trailingAnchor,
                                          bottom: nil,
                                          trailing: nil,
                                          size: .init(width: 20, height: 20))
        nicknameConfirmLable.anchor(top: nicknameTextField.bottomAnchor,
                                    leading: nicknameTextField.leadingAnchor,
                                    bottom: nil,
                                    trailing: nil)
        passwordIconImageView.anchor(top: nicknameIconImageView.bottomAnchor,
                                     leading: nicknameIconImageView.leadingAnchor,
                                     bottom: nil,
                                     trailing: nil,
                                     padding: .init(top: view.bounds.width/12, left: 0, bottom: 0, right: 0),
                                     size: .init(width: 30, height: 30))
        passwordTextField.anchor(top: passwordIconImageView.topAnchor,
                                 leading: passwordIconImageView.trailingAnchor,
                                 bottom: nil,
                                 trailing: nil,
                                 padding: .init(top: 10, left: 10, bottom: 0, right: 0),
                                 size: .init(width: 200, height: 25))
        passwordCheckIconImageView.anchor(top: passwordTextField.topAnchor,
                                          leading: passwordTextField.trailingAnchor,
                                          bottom: nil,
                                          trailing: nil,
                                          size: .init(width: 20, height: 20))
        passwordConfirmLable.anchor(top: passwordTextField.bottomAnchor,
                                    leading: passwordTextField.leadingAnchor,
                                    bottom: nil,
                                    trailing: nil)
        
        signupButton.anchor(top: nil,
                            leading: nil,
                            bottom: view.safeAreaLayoutGuide.bottomAnchor,
                            trailing: nil,
                            padding: .init(top: 0, left: 0, bottom: 50, right: 0),
                            size: .init(width: 230, height: 40))
        signupButton.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        
    }
    
    func addSubviews(views: [UIView]) {
        for temp in views {
            view.addSubview(temp)
        }
    }
    
    func textFieldDidEndEditing(_ textField: UITextField) {
        if textField == nicknameTextField {
            let nickname = textField.text!
            if nickname == "" {
                self.nicknameConfirmLable.text = "ëë¤ìì ìë ¥í´ ì£¼ì¸ì"
                self.nicknameConfirmLable.textColor = UIColor.red
                self.nicknameConfirmLable.isHidden = false
                self.nicknameTextField.backgroundColor = UIColor(red: 1, green: 0, blue: 0, alpha: 0.1)
                self.nicknameCheckIconImageView.isHidden = true
                self.nicknameConfirmed = false
            } else if nickname.count > 8 {
                self.nicknameConfirmLable.text = "ê¸¸ì´ ì íì ì´ê³¼íììµëë¤"
                self.nicknameConfirmLable.textColor = UIColor.red
                self.nicknameConfirmLable.isHidden = false
                self.nicknameTextField.backgroundColor = UIColor(red: 1, green: 0, blue: 0, alpha: 0.1)
                self.nicknameCheckIconImageView.isHidden = true
                self.nicknameConfirmed = false
            } else if nicknameCheck(str: nickname) {
                self.nicknameConfirmLable.text = "íê¸, ìì´, ì«ìë§ ì¬ì© ê°ë¥ í©ëë¤"
                self.nicknameConfirmLable.textColor = UIColor.red
                self.nicknameConfirmLable.isHidden = false
                self.nicknameCheckIconImageView.isHidden = true
                self.nicknameTextField.backgroundColor = UIColor(red: 1, green: 0, blue: 0, alpha: 0.1)
                self.nicknameConfirmed = false
            } else {
                let dicToSend: [String: Any] = ["func":"checkusable nickname", "nickname":nickname]
                let dataToSend = try! JSONSerialization.data(withJSONObject: dicToSend, options: [])
                
                ApiService.shared.getData(dataToSend: dataToSend){ (result: UsableId) in
                    if result.data! == "overlapped" {
                        self.nicknameConfirmLable.text = "ì´ë¯¸ ì¬ì©ì¤ì¸ ëë¤ì ìëë¤"
                        self.nicknameConfirmLable.textColor = UIColor.red
                        self.nicknameConfirmLable.isHidden = false
                        self.nicknameCheckIconImageView.isHidden = true
                        self.nicknameTextField.backgroundColor = UIColor(red: 1, green: 0, blue: 0, alpha: 0.1)
                        self.nicknameConfirmed = false
                    } else {
                        self.nicknameConfirmed = true
                        self.nicknameConfirmLable.text = "ì¬ì©ê°ë¥í ëë¤ì ìëë¤"
                        self.nicknameConfirmLable.textColor = UIColor.blue
                        self.nicknameCheckIconImageView.isHidden = false
                        self.nicknameTextField.backgroundColor = UIColor.clear
                    }
                }
            }
        } else if textField == passwordTextField {
            let password = passwordTextField.text!
            if password.count < 8 {
                textField.backgroundColor = UIColor(red: 1, green: 0, blue: 0, alpha: 0.1)
                passwordConfirmLable.text = "ë¹ë°ë²í¸ë 8ì ì´ìì´ íìí©ëë¤"
                passwordConfirmLable.textColor = UIColor.red
                passwordConfirmLable.isHidden = false
                passwordCheckIconImageView.isHidden = true
                passwordConfirmed = false
            } else {
                passwordConfirmLable.text = "ì¬ì©ê°ë¥í ë¹ë°ë²í¸ ìëë¤"
                passwordConfirmLable.textColor = UIColor.blue
                passwordCheckIconImageView.isHidden = false
                textField.backgroundColor = UIColor.clear
                passwordConfirmed = true
            }
        } else if textField == idTextField {
            let id = idTextField.text!
            
            if  id != "" && firstCheck(str: String(id[id.startIndex])) {
                idConfirmLable.text = "ì²« ê¸ìë ìë¬¸ì ì¬ì©í´ì¼ í©ëë¤"
                self.idConfirmLable.textColor = UIColor.red
                idConfirmLable.isHidden = false
                textField.backgroundColor = UIColor(red: 1, green: 0, blue: 0, alpha: 0.1)
                idConfirmed = false
                idCheckIconImageView.isHidden = true
            } else if id.count < 4 || id.count > 10 {
                idConfirmLable.text = "3ì ì´í 11ì ì´ìì ê¸ì ìë ì í ë©ëë¤"
                self.idConfirmLable.textColor = UIColor.red
                idConfirmLable.isHidden = false
                textField.backgroundColor = UIColor(red: 1, green: 0, blue: 0, alpha: 0.1)
                idConfirmed = false
                idCheckIconImageView.isHidden = true
            } else if idCheck(str: id) {
                idConfirmLable.text = "ìì´ì ì«ìì ì¡°í©ë§ ê°ë¥í©ëë¤"
                self.idConfirmLable.textColor = UIColor.red
                idConfirmLable.isHidden = false
                textField.backgroundColor = UIColor(red: 1, green: 0, blue: 0, alpha: 0.1)
                idConfirmed = false
                idCheckIconImageView.isHidden = true
            } else {
                let dicToSend: [String: Any] = ["func":"checkusable id", "id":id]
                let dataToSend = try! JSONSerialization.data(withJSONObject: dicToSend, options: [])
                
                ApiService.shared.getData(dataToSend: dataToSend){ (result: UsableId) in
                    if result.data! == "overlapped" {
                        self.idConfirmLable.text = "ì´ë¯¸ ì¬ì©ì¤ì¸ ìì´ë ìëë¤"
                        self.idConfirmLable.textColor = UIColor.red
                        self.idConfirmLable.isHidden = false
                        textField.backgroundColor = UIColor(red: 1, green: 0, blue: 0, alpha: 0.1)
                        self.idConfirmed = false
                        self.idCheckIconImageView.isHidden = true
                    } else {
                        textField.backgroundColor = UIColor.clear
                        self.idConfirmLable.text = "ì¬ì©ê°ë¥í ìì´ë ìëë¤"
                        self.idConfirmLable.textColor = UIColor.blue
                        self.idConfirmed = true
                        self.idCheckIconImageView.isHidden = false
                    }
                }
            }
        }
    }
    
    func nicknameCheck(str: String) -> Bool {
        do {
            let regex = try NSRegularExpression(pattern: ".*[^A-Za-z0-9ã±-ãã-ã£ê°-í£].*", options: .caseInsensitive)
            if let _ = regex.firstMatch(in: str, options: NSRegularExpression.MatchingOptions.reportCompletion, range: NSMakeRange(0, str.count)) {
                return true
            }
        } catch {
            debugPrint(error.localizedDescription)
            return false
        }
        return false
    }
    
    func firstCheck(str: String) -> Bool {
        do {
            let regex = try NSRegularExpression(pattern: ".*[^A-Za-z].*", options: .caseInsensitive)
            if let _ = regex.firstMatch(in: str, options: NSRegularExpression.MatchingOptions.reportCompletion, range: NSMakeRange(0, str.count)) {
                return true
            }
        } catch {
            debugPrint(error.localizedDescription)
            return false
        }
        return false
    }
    
    func idCheck(str: String) -> Bool {
        do {
            let regex = try NSRegularExpression(pattern: ".*[^A-Za-z0-9].*", options: .caseInsensitive)
            if let _ = regex.firstMatch(in: str, options: NSRegularExpression.MatchingOptions.reportCompletion, range: NSMakeRange(0, str.count)) {
                return true
            }
        } catch {
            debugPrint(error.localizedDescription)
            return false
        }
        return false
    }
    
    var key: String?
    
    
    @objc func requestNumber() {
//        view.loadingIndicator()
        let webmail: String = emailTextField.text ?? ""
        let dicToSend: [String: Any] = ["func":"certify", "webmail":webmail]
        let dataToSend = try! JSONSerialization.data(withJSONObject: dicToSend, options: [])
        let indexOfDomainOfMail = webmail.firstIndex(of: "@")
        
        if indexOfDomainOfMail == nil {
            let string: String = """
                ì¬ë°ë¥¸ ë©ì¼ íìì´ ìëëë¤
                ìë ¥í ì£¼ìë¥¼ íì¸í´ ì£¼ì¸ì
                """
            self.showAlert(message: string)
        } else {
            
            ApiService.shared.getData(dataToSend: dataToSend){ (result: Certify) in
                if result.data! == "usable webmail" {
                    self.insertedEmail = webmail
                    self.emailConfirmIconImageView.isHidden = false
                    self.emailConfirmTextField.isHidden = false
                    self.keyConfirmButton.isHidden = false
                    UIView.animate(withDuration: 0.7, delay: 0, options: [], animations: {
                        self.emailConfirmButton.alpha = 0
                        self.emailConfirmIconImageView.alpha = 1
                        self.emailConfirmTextField.alpha = 1
                        self.keyConfirmButton.alpha = 1
                    }, completion: { (bool: Bool) in
                        self.emailConfirmButton.isHidden = true
                    })
                    
                    self.showAlert(message: "ì¸ì¦ë²í¸ ë°ì¡ ìë£")
                } else if result.data! == "unusable webmail" {
                    self.showAlert(message: "ì´ë¯¸ ì¬ì©ì¤ì¸ ë©ì¼ ìëë¤")
                } else if result.data! == "unexist webmail"{
                    self.showAlert(message: "ì¡´ì¬íì§ ìë ë©ì¼ ìëë¤")
                }
//                self.view.loadingIndicator(false)
            }
            
        }
    }
    
    func simpleAnimation() {

        idIconImageView.isHidden = false
        idTextField.isHidden = false
        nicknameIconImageView.isHidden = false
        nicknameTextField.isHidden = false
        passwordIconImageView.isHidden = false
        passwordTextField.isHidden = false
        signupButton.isHidden = false
        
        UIView.animate(withDuration: 0.7, animations: {
            self.emailIconImageView.alpha = 0
            self.emailTextField.alpha = 0
            self.emailConfirmIconImageView.alpha = 0
            self.emailConfirmTextField.alpha = 0
            self.keyConfirmButton.alpha = 0
            
            self.idTextField.alpha = 1
            self.idIconImageView.alpha = 1
            self.nicknameIconImageView.alpha = 1
            self.nicknameTextField.alpha = 1
            self.passwordIconImageView.alpha = 1
            self.passwordTextField.alpha = 1
            self.signupButton.alpha = 1
        }, completion: { (bool: Bool) in
            self.emailIconImageView.isHidden = true
            self.emailTextField.isHidden = true
            self.emailConfirmIconImageView.isHidden = true
            self.emailConfirmTextField.isHidden = true
            self.keyConfirmButton.isHidden = true
        })

    }
    
    @objc func keyConfirm() {
        keyConfirmButton.resignFirstResponder()
        
        let dicToSend: [String: Any] = ["func":"checkkey", "webmail": insertedEmail ?? "", "key": emailConfirmTextField.text ?? ""]
        let dataToSend = try! JSONSerialization.data(withJSONObject: dicToSend, options: [])
        
        ApiService.shared.getData(dataToSend: dataToSend){ (result: SimpleResponse) in
            print(result.data!)
            if result.data! == "ok" {
                self.showAlert(message: "ì¸ì¦ ëììµëë¤")
                self.simpleAnimation()
                self.emailConfirmed = true
            } else if result.data! == "fail" {
                self.showAlert(message: "ì¸ì¦ë²í¸ê° ë¤ë¦ëë¤")
                self.emailConfirmed  = false
            }
        }
    }
    

    
    @objc func signup() {
        
        let userNickname = nicknameTextField.text
        if userNickname == "" || userNickname == " ëë¤ì" {
            self.showAlert(message: "ëë¤ìë¥¼ ìë ¥í´ ì£¼ì¸ì")
            return
        }
        let userPassword = passwordTextField.text
        if userPassword == "" || userPassword == " ë¹ë°ë²í¸" {
            self.showAlert(message: "ë¹ë°ë²í¸ë¥¼ ìë ¥í´ ì£¼ì¸ì")
            return
        }
        
        if passwordConfirmed && nicknameConfirmed && idConfirmed {
            let dicToSend = ["func":"signup", "id":idTextField.text!, "pwd":self.passwordTextField.text!.getSha256String(), "nickname":userNickname!, "webmail":self.insertedEmail!]
            let dataToSend = try! JSONSerialization.data(withJSONObject: dicToSend, options: [])
            
            ApiService.shared.getData(dataToSend: dataToSend) { (result: UsableId) in
                if result.data! == "signup ok" {
                    self.showAlert(message: "ê°ì ìë£")
                }
            }
        }
    }
    
    @objc func checked() {
        if checkbox.isChecked {
            nextButoon.setTitleColor(themeColor, for: .normal)
            nextButoon.isUserInteractionEnabled = true
        } else {
            nextButoon.setTitleColor(UIColor(white: 0.9, alpha: 1), for: .normal)
            nextButoon.isUserInteractionEnabled = false
        }
    }
    
    @objc func agreeAndNext() {
        if checkbox.isChecked {
            UIView.animate(withDuration: 0.7, delay: 0, options: [], animations: {
                self.emailIconImageView.alpha = 1
                self.emailTextField.alpha = 1
                self.emailConfirmButton.alpha = 1
                self.policyTextView.alpha = 0
                self.agreeLabel.alpha = 0
                self.checkbox.alpha = 0
                self.nextButoon.alpha = 0
            }, completion: { (bool: Bool) in
                self.emailIconImageView.isHidden = false
                self.emailTextField.isHidden = false
                self.emailConfirmButton.isHidden = false
                self.policyTextView.isHidden = true
                self.agreeLabel.isHidden = true
                self.checkbox.isHidden = true
                self.nextButoon.isHidden = true
            })
        }
    }
    
    func showAlert(message: String) {
        DispatchQueue.main.async {
            let alertMessage = UIAlertController(title: "", message: message, preferredStyle: .alert)
            let cancelAction = UIAlertAction(title: "íì¸", style: .cancel) { (temp: UIAlertAction) in
                if message == "ê°ì ìë£" {
                    self.presentingViewController?.dismiss(animated: true)
                }
            }
            
            alertMessage.addAction(cancelAction)
            self.present(alertMessage, animated: true, completion: nil)
        }
    }
    
    @objc func goBackToMemberController() {
        self.presentingViewController?.dismiss(animated: true)
    }
    
    let goBackButton: UIButton = {
        let button = UIButton()
        button.setTitle("X", for: .normal)
        button.setTitleColor(UIColor.black, for: .normal)
        button.titleLabel?.font = UIFont.boldSystemFont(ofSize: 19)
        button.accessibilityIdentifier = "goback from login"
        button.backgroundColor = .clear
        button.addTarget(self, action: #selector(goBackToMemberController), for: .touchUpInside)
        return button
    }()
    
    let logoImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.image = UIImage(named: "Logo_white")
        return imageView
    }()
    
    let idIconImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.image = UIImage(named: "person")
        return imageView
    }()
    
    let passwordIconImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.image = UIImage(named: "key")
        return imageView
    }()
    
    let nicknameIconImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.image = UIImage(named: "person")
        return imageView
    }()
    
    let emailIconImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.image = UIImage(named: "email")
        return imageView
    }()
    
    let emailConfirmIconImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.image = UIImage(named: "email_key")
        return imageView
    }()
    
    let idTextField: UITextField = {
        let textField = UITextField(frame: CGRect(x: 0, y: 0, width: 200, height: 25))
        textField.layer.addBorder([.bottom], color: UIColor.black, width: 0.5)
        textField.placeholder = "ìì´ë"
        textField.textColor = UIColor.black
        textField.givePadding()
        textField.accessibilityIdentifier = "id textfield"
        return textField
    }()
    
    let idConfirmLable: UILabel = {
        let label = UILabel()
        label.font = UIFont.systemFont(ofSize: 10)
        label.textColor = UIColor.red
        return label
    }()
    
    let idCheckIconImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.image = UIImage(named: "checked")
        return imageView
    }()
    
    let nicknameTextField: UITextField = {
        let textField = UITextField(frame: CGRect(x: 0, y: 0, width: 200, height: 25))
        textField.layer.addBorder([.bottom], color: UIColor.black, width: 0.5)
        textField.placeholder = "ëë¤ì"
        textField.textColor = UIColor.black
        textField.givePadding()
        return textField
    }()
    
    let nicknameConfirmLable: UILabel = {
        let label = UILabel()
        label.font = UIFont.systemFont(ofSize: 10)
        label.textColor = UIColor.red
        return label
    }()
    
    let nicknameCheckIconImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.image = UIImage(named: "checked")
        return imageView
    }()
    
    let passwordTextField: UITextField = {
        let textField = UITextField(frame: CGRect(x: 0, y: 0, width: 200, height: 25))
        textField.layer.addBorder([.bottom], color: UIColor.black, width: 0.5)
        textField.placeholder = "ë¹ë°ë²í¸"
        textField.textColor = UIColor.black
        textField.isSecureTextEntry = true
        textField.givePadding()
        return textField
    }()
    
    let passwordCheckIconImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.image = UIImage(named: "checked")
        return imageView
    }()
    
    let passwordConfirmLable: UILabel = {
        let label = UILabel()
        label.font = UIFont.systemFont(ofSize: 10)
        label.textColor = UIColor.red
        return label
    }()
    
    let emailTextField: UITextField = {
        let textField = UITextField(frame: CGRect(x: 0, y: 0, width: 200, height: 25))
        textField.layer.addBorder([.bottom], color: UIColor.black, width: 0.5)
        textField.placeholder = "ì´ë©ì¼"
        textField.keyboardType = .emailAddress
        textField.textColor = UIColor.black
        textField.givePadding()
        return textField
    }()
    
    let emailConfirmTextField: UITextField = {
        let textField = UITextField(frame: CGRect(x: 0, y: 0, width: 130, height: 25))
        textField.layer.addBorder([.bottom], color: UIColor.black, width: 0.5)
        textField.placeholder = "ì¸ì¦ ë²í¸ ìë ¥"
        textField.textColor = UIColor.black
        textField.givePadding()
        return textField
    }()
    
    let emailConfirmButton: UIButton = {
        let button = UIButton()
        let str: String = "ë©ì¼ë¡ ì¸ì¦ ë²í¸ ë°ì¡"
        button.setTitle(str, for: .normal)
        button.setTitleColor(themeColor, for: .normal)
        button.titleLabel?.font = .systemFont(ofSize: 16)
        button.titleLabel?.textAlignment = .center
        button.addTarget(self, action: #selector(requestNumber), for: .touchUpInside)
        //        button.titleLabel?.lineBreakMode = NSLineBreakMode.byWordWrapping
        return button
    }()
    
    let keyConfirmButton: UIButton = {
        let button = UIButton()
        button.setTitle("ì¸ì¦", for: .normal)
        button.setTitleColor(themeColor, for: .normal)
        button.titleLabel?.font = .boldSystemFont(ofSize: 16)
        button.titleLabel?.textAlignment = .center
        button.addTarget(self, action: #selector(keyConfirm), for: .touchUpInside)
        return button
    }()
    
    let signupButton: UIButton = {
        let button = UIButton()
        button.setTitle("ê°ì", for: .normal)
        button.backgroundColor = themeColor
        button.setTitleColor(.white, for: .normal)
        button.titleLabel?.font = .boldSystemFont(ofSize: 16)
        button.titleLabel?.textAlignment = .center
        button.layer.cornerRadius = 5
        button.addTarget(self, action: #selector(signup), for: .touchUpInside)
        return button
    }()
    
    let checkbox: Checkbox = {
        let checkbox = Checkbox(frame: CGRect(x: 0, y: 0, width: 25, height: 25))
        checkbox.uncheckedBorderColor = lightblack
        checkbox.borderStyle = .square
        checkbox.checkmarkSize = 0.8
        checkbox.checkedBorderColor = lightblack
        checkbox.borderWidth = 1
        checkbox.checkmarkColor = themeColor
        checkbox.checkmarkStyle = .tick
        checkbox.addTarget(self, action: #selector(checked), for: .valueChanged)
        return checkbox
    }()
    
    let agreeLabel : UILabel = {
        let label = UILabel()
        label.text = "ì´ì©ì½ê´ì ëì íìê² ìµëê¹?"
        label.textColor = lightblack
        return label
    }()
    
    let nextButoon: UIButton = {
        let button = UIButton()
        button.setTitle("ë¤ì", for: .normal)
        button.setTitleColor(UIColor(white: 0.9, alpha: 1), for: .normal)
        button.addTarget(self, action: #selector(agreeAndNext), for: .touchUpInside)
        button.isUserInteractionEnabled = false
        return button
    }()
    
    let policyTextView: UITextView = {
        let textView = UITextView()
        textView.isEditable = false
        textView.layer.borderColor = themeColor.cgColor
        textView.layer.borderWidth = 0.5
        textView.layer.cornerRadius = 5
        textView.textColor = lightblack
        textView.isUserInteractionEnabled = false
        textView.text = """
        ('ê´ì´ëë­ë¨¹')ì(ë) ê°ì¸ì ë³´ë³´í¸ë²ì ë°ë¼ ì´ì©ìì ê°ì¸ì ë³´ ë³´í¸ ë° ê¶ìµì ë³´í¸íê³  ê°ì¸ì ë³´ì ê´ë ¨í ì´ì©ìì ê³ ì¶©ì ìííê² ì²ë¦¬í  ì ìëë¡ ë¤ìê³¼ ê°ì ì²ë¦¬ë°©ì¹¨ì ëê³  ììµëë¤.

('ê´ì´ëë­ë¨¹') ì(ë) íì¬ë ê°ì¸ì ë³´ì²ë¦¬ë°©ì¹¨ì ê°ì íë ê²½ì° ì¹ì¬ì´í¸ ê³µì§ì¬í­(ëë ê°ë³ê³µì§)ì íµíì¬ ê³µì§í  ê²ìëë¤.

â ë³¸ ë°©ì¹¨ìë¶í° 2019ë 2ì 21ì¼ë¶í° ìíë©ëë¤.


1. ê°ì¸ì ë³´ì ì²ë¦¬ ëª©ì  ('ê´ì´ëë­ë¨¹')ì(ë) ê°ì¸ì ë³´ë¥¼ ë¤ìì ëª©ì ì ìí´ ì²ë¦¬í©ëë¤. ì²ë¦¬í ê°ì¸ì ë³´ë ë¤ìì ëª©ì ì´ì¸ì ì©ëë¡ë ì¬ì©ëì§ ìì¼ë©° ì´ì© ëª©ì ì´ ë³ê²½ë  ììë ì¬ì ëìë¥¼ êµ¬í  ìì ìëë¤.

ê°. ííì´ì§ íìê°ì ë° ê´ë¦¬

íì ê°ììì¬ íì¸, íìì  ìë¹ì¤ ì ê³µì ë°ë¥¸ ë³¸ì¸ ìë³Â·ì¸ì¦, íììê²© ì ì§Â·ê´ë¦¬, ìë¹ì¤ ë¶ì ì´ì© ë°©ì§ ë±ì ëª©ì ì¼ë¡ ê°ì¸ì ë³´ë¥¼ ì²ë¦¬í©ëë¤.




2. ê°ì¸ì ë³´ íì¼ íí©

1. ê°ì¸ì ë³´ íì¼ëª : kwMM
- ê°ì¸ì ë³´ í­ëª© : ì´ë©ì¼, ë¹ë°ë²í¸, ë¡ê·¸ì¸ID, ìë¹ì¤ ì´ì© ê¸°ë¡, ì ì ë¡ê·¸, ì¿ í¤, ì ì IP ì ë³´
- ìì§ë°©ë² : ëª¨ë°ì¼ ì´íë¦¬ì¼ì´ì
- ë³´ì ê·¼ê±° : ì ë³´ì£¼ì²´ì ëì
- ë³´ì ê¸°ê° : íí´ ì ê¹ì§
- ê´ë ¨ë²ë ¹ : ìë¹ìì ë¶ë§ ëë ë¶ìì²ë¦¬ì ê´í ê¸°ë¡ : 3ë, íì/ê´ê³ ì ê´í ê¸°ë¡ : 6ê°ì




3. ê°ì¸ì ë³´ì ì²ë¦¬ ë° ë³´ì  ê¸°ê°

â  ('ê´ì´ëë­ë¨¹')ì(ë) ë²ë ¹ì ë°ë¥¸ ê°ì¸ì ë³´ ë³´ì Â·ì´ì©ê¸°ê° ëë ì ë³´ì£¼ì²´ë¡ë¶í° ê°ì¸ì ë³´ë¥¼ ìì§ìì ëì ë°ì ê°ì¸ì ë³´ ë³´ì ,ì´ì©ê¸°ê° ë´ìì ê°ì¸ì ë³´ë¥¼ ì²ë¦¬,ë³´ì í©ëë¤.

â¡ ê°ê°ì ê°ì¸ì ë³´ ì²ë¦¬ ë° ë³´ì  ê¸°ê°ì ë¤ìê³¼ ê°ìµëë¤.

4. ì ë³´ì£¼ì²´ì ë²ì ëë¦¬ì¸ì ê¶ë¦¬Â·ìë¬´ ë° ê·¸ íì¬ë°©ë² ì´ì©ìë ê°ì¸ì ë³´ì£¼ì²´ë¡ì¨ ë¤ìê³¼ ê°ì ê¶ë¦¬ë¥¼ íì¬í  ì ììµëë¤.

â  ì ë³´ì£¼ì²´ë ê´ì´ëë­ë¨¹ì ëí´ ì¸ì ë ì§ ê°ì¸ì ë³´ ì´ë,ì ì ,ì­ì ,ì²ë¦¬ì ì§ ìêµ¬ ë±ì ê¶ë¦¬ë¥¼ íì¬í  ì ììµëë¤.
â¡ ì 1í­ì ë°ë¥¸ ê¶ë¦¬ íì¬ë ê´ì´ëë­ë¨¹ì ëí´ ê°ì¸ì ë³´ ë³´í¸ë² ìíë ¹ ì 41ì¡°ì 1í­ì ë°ë¼ ìë©´, ì ìì°í¸, ëª¨ì¬ì ì¡(FAX) ë±ì íµíì¬ íì¤ ì ìì¼ë©° ê´ì´ëë­ë¨¹ì(ë) ì´ì ëí´ ì§ì²´ ìì´ ì¡°ì¹íê² ìµëë¤.
â¢ ì 1í­ì ë°ë¥¸ ê¶ë¦¬ íì¬ë ì ë³´ì£¼ì²´ì ë²ì ëë¦¬ì¸ì´ë ììì ë°ì ì ë± ëë¦¬ì¸ì íµíì¬ íì¤ ì ììµëë¤. ì´ ê²½ì° ê°ì¸ì ë³´ ë³´í¸ë² ìíê·ì¹ ë³ì§ ì 11í¸ ììì ë°ë¥¸ ììì¥ì ì ì¶íìì¼ í©ëë¤.
â£ ê°ì¸ì ë³´ ì´ë ë° ì²ë¦¬ì ì§ ìêµ¬ë ê°ì¸ì ë³´ë³´í¸ë² ì 35ì¡° ì 5í­, ì 37ì¡° ì 2í­ì ìíì¬ ì ë³´ì£¼ì²´ì ê¶ë¦¬ê° ì í ë  ì ììµëë¤.
â¤ ê°ì¸ì ë³´ì ì ì  ë° ì­ì  ìêµ¬ë ë¤ë¥¸ ë²ë ¹ìì ê·¸ ê°ì¸ì ë³´ê° ìì§ ëìì¼ë¡ ëªìëì´ ìë ê²½ì°ìë ê·¸ ì­ì ë¥¼ ìêµ¬í  ì ììµëë¤.
â¥ ê´ì´ëë­ë¨¹ì(ë) ì ë³´ì£¼ì²´ ê¶ë¦¬ì ë°ë¥¸ ì´ëì ìêµ¬, ì ì Â·ì­ì ì ìêµ¬, ì²ë¦¬ì ì§ì ìêµ¬ ì ì´ë ë± ìêµ¬ë¥¼ í ìê° ë³¸ì¸ì´ê±°ë ì ë¹í ëë¦¬ì¸ì¸ì§ë¥¼ íì¸í©ëë¤.



5. ì²ë¦¬íë ê°ì¸ì ë³´ì í­ëª© ìì±

â  ('ê´ì´ëë­ë¨¹')ì(ë) ë¤ìì ê°ì¸ì ë³´ í­ëª©ì ì²ë¦¬íê³  ììµëë¤.

1<ííì´ì§ íìê°ì ë° ê´ë¦¬>
- íìí­ëª© : ì´ë©ì¼, ë¹ë°ë²í¸, ë¡ê·¸ì¸ID, ìë¹ì¤ ì´ì© ê¸°ë¡, ì ì ë¡ê·¸, ì¿ í¤, ì ì IP ì ë³´




6. ê°ì¸ì ë³´ì íê¸°('ê´ì´ëë­ë¨¹')ì(ë) ìì¹ì ì¼ë¡ ê°ì¸ì ë³´ ì²ë¦¬ëª©ì ì´ ë¬ì±ë ê²½ì°ìë ì§ì²´ìì´ í´ë¹ ê°ì¸ì ë³´ë¥¼ íê¸°í©ëë¤. íê¸°ì ì ì°¨, ê¸°í ë° ë°©ë²ì ë¤ìê³¼ ê°ìµëë¤.

-íê¸°ì ì°¨
ì´ì©ìê° ìë ¥í ì ë³´ë ëª©ì  ë¬ì± í ë³ëì DBì ì®ê²¨ì ¸(ì¢ì´ì ê²½ì° ë³ëì ìë¥) ë´ë¶ ë°©ì¹¨ ë° ê¸°í ê´ë ¨ ë²ë ¹ì ë°ë¼ ì¼ì ê¸°ê° ì ì¥ë í í¹ì ì¦ì íê¸°ë©ëë¤. ì´ ë, DBë¡ ì®ê²¨ì§ ê°ì¸ì ë³´ë ë²ë¥ ì ìí ê²½ì°ê° ìëê³ ìë ë¤ë¥¸ ëª©ì ì¼ë¡ ì´ì©ëì§ ììµëë¤.

-íê¸°ê¸°í
ì´ì©ìì ê°ì¸ì ë³´ë ê°ì¸ì ë³´ì ë³´ì ê¸°ê°ì´ ê²½ê³¼ë ê²½ì°ìë ë³´ì ê¸°ê°ì ì¢ë£ì¼ë¡ë¶í° 5ì¼ ì´ë´ì, ê°ì¸ì ë³´ì ì²ë¦¬ ëª©ì  ë¬ì±, í´ë¹ ìë¹ì¤ì íì§, ì¬ìì ì¢ë£ ë± ê·¸ ê°ì¸ì ë³´ê° ë¶íìíê² ëìì ëìë ê°ì¸ì ë³´ì ì²ë¦¬ê° ë¶íìí ê²ì¼ë¡ ì¸ì ëë ë ë¡ë¶í° 5ì¼ ì´ë´ì ê·¸ ê°ì¸ì ë³´ë¥¼ íê¸°í©ëë¤.

-íê¸°ë°©ë²
ì ìì  íì¼ ííì ì ë³´ë ê¸°ë¡ì ì¬ìí  ì ìë ê¸°ì ì  ë°©ë²ì ì¬ì©í©ëë¤.



7. ê°ì¸ì ë³´ ìë ìì§ ì¥ì¹ì ì¤ì¹â¢ì´ì ë° ê±°ë¶ì ê´í ì¬í­

â  ê´ì´ëë­ë¨¹ ì ê°ë³ì ì¸ ë§ì¶¤ìë¹ì¤ë¥¼ ì ê³µíê¸° ìí´ ì´ì©ì ë³´ë¥¼ ì ì¥íê³  ììë¡ ë¶ë¬ì¤ë âì¿ í¤(cookie)âë¥¼ ì¬ì©í©ëë¤. â¡ ì¿ í¤ë ì¹ì¬ì´í¸ë¥¼ ì´ìíëë° ì´ì©ëë ìë²(http)ê° ì´ì©ìì ì»´í¨í° ë¸ë¼ì°ì ìê² ë³´ë´ë ìëì ì ë³´ì´ë©° ì´ì©ìë¤ì PC ì»´í¨í°ë´ì íëëì¤í¬ì ì ì¥ëê¸°ë í©ëë¤. ê°. ì¿ í¤ì ì¬ì© ëª©ì  : ì´ì©ìê° ë°©ë¬¸í ê° ìë¹ì¤ì ì¹ ì¬ì´í¸ë¤ì ëí ë°©ë¬¸ ë° ì´ì©íí, ì¸ê¸° ê²ìì´, ë³´ìì ì ì¬ë¶, ë±ì íìíì¬ ì´ì©ììê² ìµì íë ì ë³´ ì ê³µì ìí´ ì¬ì©ë©ëë¤. ë. ì¿ í¤ì ì¤ì¹â¢ì´ì ë° ê±°ë¶ : ì¹ë¸ë¼ì°ì  ìë¨ì ëêµ¬>ì¸í°ë· ìµì>ê°ì¸ì ë³´ ë©ë´ì ìµì ì¤ì ì íµí´ ì¿ í¤ ì ì¥ì ê±°ë¶ í  ì ììµëë¤. ë¤. ì¿ í¤ ì ì¥ì ê±°ë¶í  ê²½ì° ë§ì¶¤í ìë¹ì¤ ì´ì©ì ì´ë ¤ìì´ ë°ìí  ì ììµëë¤.


8. ê°ì¸ì ë³´ ë³´í¸ì±ìì ìì±


â  ê´ì´ëë­ë¨¹ ì(ë) ê°ì¸ì ë³´ ì²ë¦¬ì ê´í ìë¬´ë¥¼ ì´ê´í´ì ì±ìì§ê³ , ê°ì¸ì ë³´ ì²ë¦¬ì ê´ë ¨í ì ë³´ì£¼ì²´ì ë¶ë§ì²ë¦¬ ë° í¼í´êµ¬ì  ë±ì ìíì¬ ìëì ê°ì´ ê°ì¸ì ë³´ ë³´í¸ì±ììë¥¼ ì§ì íê³  ììµëë¤.

â¶ ê°ì¸ì ë³´ ë³´í¸ì±ìì
ì±ëª :ì íí
ì§ì± :ê°ë°
ì°ë½ì² :010-2018-5509, 2354taeng@gmail.com,

â¡ ì ë³´ì£¼ì²´ê»ìë ê´ì´ëë­ë¨¹ ì ìë¹ì¤(ëë ì¬ì)ì ì´ì©íìë©´ì ë°ìí ëª¨ë  ê°ì¸ì ë³´ ë³´í¸ ê´ë ¨ ë¬¸ì, ë¶ë§ì²ë¦¬, í¼í´êµ¬ì  ë±ì ê´í ì¬í­ì ê°ì¸ì ë³´ ë³´í¸ì±ìì ë° ë´ë¹ë¶ìë¡ ë¬¸ìíì¤ ì ììµëë¤. ê´ì´ëë­ë¨¹ ì(ë) ì ë³´ì£¼ì²´ì ë¬¸ìì ëí´ ì§ì²´ ìì´ ëµë³ ë° ì²ë¦¬í´ëë¦´ ê²ìëë¤.



9. ê°ì¸ì ë³´ ì²ë¦¬ë°©ì¹¨ ë³ê²½

â ì´ ê°ì¸ì ë³´ì²ë¦¬ë°©ì¹¨ì ìíì¼ë¡ë¶í° ì ì©ëë©°, ë²ë ¹ ë° ë°©ì¹¨ì ë°ë¥¸ ë³ê²½ë´ì©ì ì¶ê°, ì­ì  ë° ì ì ì´ ìë ê²½ì°ìë ë³ê²½ì¬í­ì ìí 7ì¼ ì ë¶í° ê³µì§ì¬í­ì íµíì¬ ê³ ì§í  ê²ìëë¤.



10. ê°ì¸ì ë³´ì ìì ì± íë³´ ì¡°ì¹ ('ê´ì´ëë­ë¨¹')ì(ë) ê°ì¸ì ë³´ë³´í¸ë² ì 29ì¡°ì ë°ë¼ ë¤ìê³¼ ê°ì´ ìì ì± íë³´ì íìí ê¸°ì ì /ê´ë¦¬ì  ë° ë¬¼ë¦¬ì  ì¡°ì¹ë¥¼ íê³  ììµëë¤.

1. ê°ì¸ì ë³´ì ìí¸í
ì´ì©ìì ë¹ë°ë²í¸ë ìí¸í ëì´ ì ì¥ ë° ê´ë¦¬ëê³  ìì´, ë³¸ì¸ë§ì´ ì ì ìì¼ë©° ì¤ìí ë°ì´í°ë íì¼ ë° ì ì¡ ë°ì´í°ë¥¼ ìí¸í íê±°ë íì¼ ì ê¸ ê¸°ë¥ì ì¬ì©íë ë±ì ë³ë ë³´ìê¸°ë¥ì ì¬ì©íê³  ììµëë¤.

2. ê°ì¸ì ë³´ì ëí ì ê·¼ ì í
ê°ì¸ì ë³´ë¥¼ ì²ë¦¬íë ë°ì´í°ë² ì´ì¤ìì¤íì ëí ì ê·¼ê¶íì ë¶ì¬,ë³ê²½,ë§ìë¥¼ íµíì¬ ê°ì¸ì ë³´ì ëí ì ê·¼íµì ë¥¼ ìíì¬ íìí ì¡°ì¹ë¥¼ íê³  ìì¼ë©° ì¹¨ìì°¨ë¨ìì¤íì ì´ì©íì¬ ì¸ë¶ë¡ë¶í°ì ë¬´ë¨ ì ê·¼ì íµì íê³  ììµëë¤.
"""
        
        
        return textView
    }()
    
    
}
